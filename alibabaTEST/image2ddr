`timescale 1ns/1ps

module image2ddr #(
	parameter	DSIZE	= 24,
	parameter	MSIZE	= 12
)(
	input				                                                clk_300,
  input                                                       rst_300,
  input                                                       clk_266,
  input                                                       rst_266,

	input				                                                in_valid,
	input                                               [23:0]	inrgb,
	
  
  
);

reg [23:0] picbuf0 [0:1280*16-1];
reg [23:0] picbuf1 [0:1280*16-1];

reg [31:0] picpoint1;
reg [31:0] piccounter1;
reg picfinish0;
reg picfinish1;
reg picflag1sttime;

always@(posedge clk_300)begin
  if(!rst_300)begin
    picpoint1 <= 0;
    piccounter1 <= 0;
    picfinish0 <= 0;//finish storing pic buf0
    picfinish1 <= 0;
    picflag1sttime <= 1;
  end else begin
    if (in_valid) begin
      if(picpoint1 == 0)begin
        picbuf0[piccounter1] <= inrgb;
        piccounter1 <= piccounter1 + 1;
      end else begin //picpoint1 == 1
        picbuf1[piccounter1] <= inrgb;
        piccounter1 <= piccounter1 + 1;
      end
      if(piccounter1 == 1280*16 - 1)begin
        picpoint1 <= !picpoint1;
        piccounter1 <= 0;
        if(picflag1sttime)begin
          picfinish0 <= 1;
          picfinish1 <= 0;
          picflag1sttime <= 0;
        end else begin
          picfinish0 <= !picfinish0;
          picfinish1 <= !picfinish1;
        end
      end
    end
  end
end


/////////////////FSM 1
always @ (posedge clk_266) begin
  if (rst_266) begin
    pre_state <= S_IDLE;
  end else begin
    pre_state <= next_state;
  end
end
/////////////////FSM 1




endmodule
